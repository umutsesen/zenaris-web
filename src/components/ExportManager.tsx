import { useState } from 'react';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from './ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { Download, FileText, Copy, Check, AlertTriangle, Heart, X, Shield } from 'lucide-react';
import { toast } from 'sonner';
import type { Elder, Food, DislikedFood, Allergy } from './DataManager';

interface ExportManagerProps {
  elder: Elder;
  favorites: Food[];
  dislikes: DislikedFood[];
  allergies: Allergy[];
  notes: string;
  lastUpdated?: string;
}

export function ExportManager({ elder, favorites, dislikes, allergies, notes, lastUpdated }: ExportManagerProps) {
  const [copied, setCopied] = useState(false);

  // Map internal dislike levels to human-readable labels
  const getDislikeLevelLabel = (level: DislikedFood['level']): string => {
    switch (level) {
      case 'absolute':
        return 'Never Serve';
      case 'moderate':
        return 'Strong Dislike';
      case 'mild':
      default:
        return 'Mild Dislike';
    }
  };

  const generateTextSummary = () => {
    const sections = [];
    
    sections.push(`MEAL PREFERENCES SUMMARY`);
    sections.push(`${'='.repeat(50)}`);
    sections.push(`Name: ${elder.name}`);
    sections.push(`Date of Birth: ${elder.birthday}`);
    sections.push(`Primary Caregiver: ${elder.primaryCaregiver || 'Not specified'}`);
    sections.push(`Emergency Contact: ${elder.emergencyContact || 'Not specified'}`);
    if (lastUpdated) {
      sections.push(`Last Updated: ${new Date(lastUpdated).toLocaleDateString()} at ${new Date(lastUpdated).toLocaleTimeString()}`);
    }
    sections.push('');

    // Critical allergies first
    const severeAllergies = allergies.filter(a => a.severity === 'severe');
    if (severeAllergies.length > 0) {
      sections.push(`üö® SEVERE ALLERGIES - MEDICAL EMERGENCY RISK`);
      sections.push(`${'='.repeat(50)}`);
      severeAllergies.forEach(allergy => {
        sections.push(`‚ö†Ô∏è  ${allergy.label.toUpperCase()} - SEVERE REACTION`);
      });
      sections.push('');
    }

    // Absolute avoids
    const absoluteAvoids = dislikes.filter(d => d.level === 'absolute');
    if (absoluteAvoids.length > 0) {
      sections.push(`‚ùå NEVER SERVE - ABSOLUTE AVOIDS`);
      sections.push(`${'='.repeat(30)}`);
      absoluteAvoids.forEach(dislike => {
        sections.push(`‚Ä¢ ${dislike.name}`);
      });
      sections.push('');
    }

    // Favorites
    if (favorites.length > 0) {
      sections.push(`‚ù§Ô∏è  FAVORITE FOODS`);
      sections.push(`${'='.repeat(20)}`);
      const categorized = favorites.reduce((acc, fav) => {
        const cat = fav.category || 'General';
        if (!acc[cat]) acc[cat] = [];
        acc[cat].push(fav.name);
        return acc;
      }, {} as Record<string, string[]>);
      
      Object.entries(categorized).forEach(([category, items]) => {
        sections.push(`${category}:`);
        items.forEach(item => sections.push(`  ‚Ä¢ ${item}`));
      });
      sections.push('');
    }

    // All allergies section
    if (allergies.length > 0) {
      sections.push(`üõ°Ô∏è  ALL ALLERGIES & INTOLERANCES`);
      sections.push(`${'='.repeat(35)}`);
      allergies.forEach(allergy => {
        const severity = allergy.severity === 'severe' ? 'üö® SEVERE' : '‚ö†Ô∏è  Mild';
        sections.push(`‚Ä¢ ${allergy.label} - ${severity}`);
      });
      sections.push('');
    }

    // Dislikes
    if (dislikes.length > 0) {
      sections.push(`üëé FOODS TO AVOID`);
      sections.push(`${'='.repeat(20)}`);
      const byLevel = dislikes.reduce((acc, dislike) => {
        if (!acc[dislike.level]) acc[dislike.level] = [];
        acc[dislike.level].push(dislike.name);
        return acc;
      }, {} as Record<string, string[]>);
      
      if (byLevel.absolute) {
        sections.push(`Never Serve:`);
        byLevel.absolute.forEach(item => sections.push(`  ‚Ä¢ ${item}`));
      }
      if (byLevel.moderate) {
        sections.push(`Strong Dislike:`);
        byLevel.moderate.forEach(item => sections.push(`  ‚Ä¢ ${item}`));
      }
      if (byLevel.mild) {
        sections.push(`Mild Dislike:`);
        byLevel.mild.forEach(item => sections.push(`  ‚Ä¢ ${item}`));
      }
      sections.push('');
    }

    // Notes
    if (notes.trim()) {
      sections.push(`üìù SPECIAL INSTRUCTIONS`);
      sections.push(`${'='.repeat(25)}`);
      sections.push(notes);
      sections.push('');
    }

    sections.push(`Generated by Zenaris Meal Preferences ‚Ä¢ ${new Date().toLocaleDateString()}`);
    
    return sections.join('\n');
  };

  const generatePrintableHTML = () => {
    const severeAllergies = allergies.filter(a => a.severity === 'severe');
    const absoluteAvoids = dislikes.filter(d => d.level === 'absolute');
    
    return `
<!DOCTYPE html>
<html>
<head>
    <title>Meal Preferences - ${elder.name}</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 20px; color: #1F2937; }
        .header { border-bottom: 3px solid #103A3A; padding-bottom: 15px; margin-bottom: 20px; }
        .elder-name { font-size: 24px; font-weight: bold; color: #103A3A; margin: 0; }
        .elder-info { color: #6B7280; margin-top: 5px; }
        .emergency-alert { background: #FEE2E2; border: 2px solid #EF4444; border-radius: 8px; padding: 15px; margin: 15px 0; }
        .severe-allergy { background: #FEE2E2; border-left: 4px solid #EF4444; padding: 12px; margin: 8px 0; }
        .absolute-avoid { background: #FEF3C7; border-left: 4px solid #F59E0B; padding: 12px; margin: 8px 0; }
        .section { margin: 20px 0; page-break-inside: avoid; }
        .section-title { font-size: 18px; font-weight: bold; color: #103A3A; border-bottom: 1px solid #E7E2D6; padding-bottom: 5px; margin-bottom: 10px; }
        .item { margin: 5px 0; padding: 5px 0; }
        .badge { display: inline-block; background: #F3F4F6; color: #374151; padding: 2px 8px; border-radius: 12px; font-size: 12px; margin-left: 8px; }
        .badge-severe { background: #FEE2E2; color: #B91C1C; }
        .badge-mild { background: #DBEAFE; color: #1E40AF; }
        .footer { margin-top: 30px; padding-top: 15px; border-top: 1px solid #E7E2D6; font-size: 12px; color: #6B7280; }
        @media print { body { margin: 0; } .no-print { display: none; } }
    </style>
</head>
<body>
    <div class="header">
        <h1 class="elder-name">${elder.name}</h1>
        <div class="elder-info">
            Born: ${elder.birthday} | Primary Caregiver: ${elder.primaryCaregiver || 'Not specified'}
            ${elder.emergencyContact ? `| Emergency: ${elder.emergencyContact}` : ''}
        </div>
        ${lastUpdated ? `<div class="elder-info">Last Updated: ${new Date(lastUpdated).toLocaleDateString()} at ${new Date(lastUpdated).toLocaleTimeString()}</div>` : ''}
    </div>

    ${severeAllergies.length > 0 ? `
    <div class="emergency-alert">
        <h2 style="margin: 0 0 10px 0; color: #B91C1C;">üö® SEVERE ALLERGIES - MEDICAL EMERGENCY RISK</h2>
        ${severeAllergies.map(a => `<div class="severe-allergy"><strong>${a.label.toUpperCase()}</strong> - Can cause severe reactions</div>`).join('')}
    </div>
    ` : ''}

    ${absoluteAvoids.length > 0 ? `
    <div class="section">
        <h2 class="section-title">‚ùå Never Serve</h2>
        ${absoluteAvoids.map(d => `<div class="item">‚Ä¢ ${d.name}</div>`).join('')}
    </div>
    ` : ''}

    ${favorites.length > 0 ? `
    <div class="section">
        <h2 class="section-title">‚ù§Ô∏è Favorite Foods</h2>
        ${favorites.map(f => `<div class="item">‚Ä¢ ${f.name}${f.category ? `<span class="badge">${f.category}</span>` : ''}</div>`).join('')}
    </div>
    ` : ''}

    ${allergies.length > 0 ? `
    <div class="section">
        <h2 class="section-title">üõ°Ô∏è All Allergies & Intolerances</h2>
        ${allergies.map(a => `<div class="item">‚Ä¢ ${a.label}<span class="badge ${a.severity === 'severe' ? 'badge-severe' : 'badge-mild'}">${a.severity === 'severe' ? 'SEVERE' : 'Mild'}</span></div>`).join('')}
    </div>
    ` : ''}

    ${dislikes.length > 0 ? `
    <div class="section">
        <h2 class="section-title">üëé Foods to Avoid</h2>
  ${dislikes.map(d => `<div class="item">‚Ä¢ ${d.name}<span class="badge">${getDislikeLevelLabel(d.level)}</span></div>`).join('')}
    </div>
    ` : ''}

    ${notes.trim() ? `
    <div class="section">
        <h2 class="section-title">üìù Special Instructions</h2>
        <div style="white-space: pre-wrap; line-height: 1.5;">${notes}</div>
    </div>
    ` : ''}

    <div class="footer">
        Generated by Zenaris Meal Preferences ‚Ä¢ ${new Date().toLocaleDateString()}
    </div>
</body>
</html>
    `;
  };

  const handlePrint = () => {
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(generatePrintableHTML());
      printWindow.document.close();
      printWindow.focus();
      printWindow.print();
      toast.success("Print dialog opened");
    }
  };

  const handleCopyText = async () => {
    try {
      await navigator.clipboard.writeText(generateTextSummary());
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
      toast.success("Summary copied to clipboard");
    } catch (error) {
      console.error('Failed to copy text summary', error);
      toast.error("Failed to copy to clipboard");
    }
  };

  const handleDownloadText = () => {
    const text = generateTextSummary();
    const blob = new Blob([text], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${elder.name.replace(/\s+/g, '_')}_meal_preferences.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    toast.success("File downloaded");
  };

  const generateQuickReference = () => {
    const severeAllergies = allergies.filter(a => a.severity === 'severe');
    const absoluteAvoids = dislikes.filter(d => d.level === 'absolute');
    const topFavorites = favorites.slice(0, 5);

    return (
      <div className="space-y-4">
        {severeAllergies.length > 0 && (
          <div className="p-4 bg-red-50 border-2 border-red-200 rounded-md">
            <div className="flex items-center gap-2 mb-2">
              <AlertTriangle className="h-5 w-5 text-red-600" />
              <h3 className="font-medium text-red-900">üö® SEVERE ALLERGIES</h3>
            </div>
            <div className="space-y-1">
              {severeAllergies.map(allergy => (
                <div key={allergy.id} className="flex items-center gap-2">
                  <Shield className="h-4 w-4 text-red-600" />
                  <span className="font-medium text-red-800">{allergy.label}</span>
                </div>
              ))}
            </div>
          </div>
        )}

        {absoluteAvoids.length > 0 && (
          <div className="p-4 bg-orange-50 border border-orange-200 rounded-md">
            <div className="flex items-center gap-2 mb-2">
              <X className="h-5 w-5 text-orange-600" />
              <h3 className="font-medium text-orange-900">Never Serve</h3>
            </div>
            <div className="space-y-1">
              {absoluteAvoids.map(dislike => (
                <div key={dislike.id} className="text-orange-800">‚Ä¢ {dislike.name}</div>
              ))}
            </div>
          </div>
        )}

        {topFavorites.length > 0 && (
          <div className="p-4 bg-green-50 border border-green-200 rounded-md">
            <div className="flex items-center gap-2 mb-2">
              <Heart className="h-5 w-5 text-green-600" />
              <h3 className="font-medium text-green-900">Top Favorites</h3>
            </div>
            <div className="space-y-1">
              {topFavorites.map(favorite => (
                <div key={favorite.id} className="flex items-center justify-between">
                  <span className="text-green-800">‚Ä¢ {favorite.name}</span>
                  {favorite.category && (
                    <Badge variant="secondary" className="text-xs">{favorite.category}</Badge>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    );
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline" size="lg" className="h-12 px-6 text-base border-1">
          <FileText className="h-5 w-5 mr-2" />
          Export & Share
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Export Meal Preferences</DialogTitle>
        </DialogHeader>
        
        <Tabs defaultValue="quick" className="w-full">
          <TabsList className="grid w-full grid-cols-3" >
            <TabsTrigger value="quick" className="h-10 cursor-pointer">Quick Ref</TabsTrigger>
            <TabsTrigger value="full" className="h-10 cursor-pointer">Full Summary</TabsTrigger>
            <TabsTrigger value="print" className="h-10 cursor-pointer">Print/PDF</TabsTrigger>
          </TabsList>
          
          <TabsContent value="quick" className="space-y-4">
            <div className="text-sm text-muted-foreground pt-8">
              Essential information for quick reference during meal planning
            </div>
            {generateQuickReference()}
            <div className="flex gap-2 pt-4">
              <Button onClick={handleCopyText} size="lg" className="flex-1">
                {copied ? <Check className="h-4 w-4 mr-2" /> : <Copy className="h-4 w-4 mr-2" />}
                {copied ? 'Copied!' : 'Copy Text'}
              </Button>
              <Button onClick={handleDownloadText} variant="outline" size="lg">
                <Download className="h-4 w-4 mr-2" />
                Download
              </Button>
            </div>
          </TabsContent>
          
          <TabsContent value="full" className="space-y-4">
            <div className="text-sm text-muted-foreground pt-8 ">
              Complete preferences summary in text format
            </div>
            <div className="bg-muted p-4 rounded-md max-h-60 overflow-y-auto font-mono text-sm whitespace-pre-wrap">
              {generateTextSummary()}
            </div>
            <div className="flex gap-2">
              <Button onClick={handleCopyText} size="lg" className="flex-1">
                {copied ? <Check className="h-4 w-4 mr-2" /> : <Copy className="h-4 w-4 mr-2" />}
                {copied ? 'Copied!' : 'Copy Text'}
              </Button>
              <Button onClick={handleDownloadText} variant="outline" size="lg">
                <Download className="h-4 w-4 mr-2" />
                Download
              </Button>
            </div>
          </TabsContent>
          
          <TabsContent value="print" className="space-y-4">
            <div className="text-sm text-muted-foreground pt-8">
              Professional formatted version for printing or saving as PDF
            </div>
            <iframe
              title="Print preview"
              className="bg-white border rounded-md w-full h-60"
              sandbox="allow-same-origin"
              srcDoc={generatePrintableHTML()}
            />
            <div className="flex gap-2">
              <Button onClick={handlePrint} size="lg" className="flex-1">
                <FileText className="h-4 w-4 mr-2" />
                Print / Save as PDF
              </Button>
              <Button onClick={handleDownloadText} variant="outline" size="lg">
                <Download className="h-4 w-4 mr-2" />
                Download Text
              </Button>
            </div>
          </TabsContent>
        </Tabs>
      </DialogContent>
    </Dialog>
  );
}